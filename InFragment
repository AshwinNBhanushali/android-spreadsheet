package info.androidhive.slidingmenu;

import java.util.ArrayList;
import java.util.List;

import android.app.ActionBar;
import android.app.Activity;
import android.app.Fragment;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import com.inqbarna.tablefixheaders.TableFixHeaders;
import com.inqbarna.tablefixheaders.adapters.BaseTableAdapter;


public class FamilyTable extends Fragment {

	private class NexusTypes {
		private final String name;
		private final List<Nexus> list;

		NexusTypes(String name) {
			this.name = name;
			list = new ArrayList<Nexus>();
		}

		public int size() {
			return list.size();
		}

		public Nexus get(int i) {
			return list.get(i);
		}
	}

	private class Nexus {
		private final String[] data;

		private Nexus(String name, String january, String feb, String mar, String april, String may, String june,String july,String Aug,String Sep,String oct,String nov,String dec,String total,String avg) {
			data = new String[] {
					name,
					january,
					feb,
                    mar,
					april,
					may,
					june,
					july,Aug,Sep,oct,nov,dec,total,avg };
		}
	}
/*
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.table);
        ActionBar actionBar = getActionBar();
        actionBar.setDisplayHomeAsUpEnabled(true);
		TableFixHeaders tableFixHeaders = (TableFixHeaders) findViewById(R.id.table);
		BaseTableAdapter baseTableAdapter = new FamilyNexusAdapter(this);
		tableFixHeaders.setAdapter(baseTableAdapter);
	}*/
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {

        View rootView = inflater.inflate(R.layout.table, container, false);
        ActionBar actionBar = getActivity().getActionBar();
        actionBar.setDisplayHomeAsUpEnabled(true);
        return rootView;
    }
    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        TableFixHeaders tableFixHeaders = (TableFixHeaders)getActivity().findViewById(R.id.table);
        BaseTableAdapter baseTableAdapter = new FamilyNexusAdapter(getActivity().getApplicationContext());
        tableFixHeaders.setAdapter(baseTableAdapter);
    }

	public class FamilyNexusAdapter extends BaseTableAdapter {

		private final NexusTypes familys[];
		private final String headers[] = {
				"Name",
				"January",
				"February",
				"March",
				"April",
				"May",
				"June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
                "Total",
                "Avg"

		};

		private final int[] widths = {
				110,
				80,
				80,
				80,
				80,
				80,
				80,
                80,
                80,
                80,
                80,
                80,
                80,
                80,
                80
		};
		private final float density;

		public FamilyNexusAdapter(Context context) {
			familys = new NexusTypes[] {
					new NexusTypes("Expanse"),
					new NexusTypes("Balance"),
				new NexusTypes("Others"),
			};

			density = context.getResources().getDisplayMetrics().density;


			familys[0].list.add(new Nexus("Transportation", "", "", "", "", "", "","","","","","","","",""));
			familys[0].list.add(new Nexus("Home", "", "", "", "", "", "","","","","","","","",""));
			familys[0].list.add(new Nexus("Utilities", "", "", "", "", "", "","","","","","","","",""));
			familys[0].list.add(new Nexus("Health", "", "", "", "", "", "","","","","","","","",""));
			familys[0].list.add(new Nexus("Entertainment", "", "", "", "", "", "","","","","","","","",""));
			familys[0].list.add(new Nexus("Miscellaneous", "", "", "", "", "", "","","","","","","","",""));
			familys[1].list.add(new Nexus("Total Expanse", "", "", "", "", "", "","","","","","","","",""));
			familys[1].list.add(new Nexus("Total Income", "", "", "", "", "", "","","","","","","","",""));
			familys[1].list.add(new Nexus("Savings", "", "", "", "", "", "","","","","","","","",""));
			familys[1].list.add(new Nexus("", "Samsung", "Jelly Bean", "17", "32 GB", "10\"", "2 GB","","","","","","","",""));
			familys[2].list.add(new Nexus("", "--", "Honeycomb", "13", "--", "--", "--","","","","","","","",""));
		}


		public int getRowCount() {
			return 11;
		}


		public int getColumnCount() {
			return 14;
		}


		public View getView(int row, int column, View convertView, ViewGroup parent) {
			final View view;
			switch (getItemViewType(row, column)) {
				case 0:
					view = getFirstHeader(row, column, convertView, parent);
				break;
				case 1:
					view = getHeader(row, column, convertView, parent);
				break;
				case 2:
					view = getFirstBody(row, column, convertView, parent);
				break;
				case 3:
					view = getBody(row, column, convertView, parent);
				break;
				case 4:
					view = getFamilyView(row, column, convertView, parent);
				break;
				default:
					throw new RuntimeException("wtf?");
			}
			return view;
		}

		private View getFirstHeader(int row, int column, View convertView, ViewGroup parent) {
			if (convertView == null) {
				convertView = getActivity().getLayoutInflater().inflate(R.layout.item_table_header_first, parent, false);
			}
			((TextView) convertView.findViewById(android.R.id.text1)).setText(headers[0]);
			return convertView;
		}

		private View getHeader(int row, int column, View convertView, ViewGroup parent) {
			if (convertView == null) {
				convertView = getActivity().getLayoutInflater().inflate(R.layout.item_table_header, parent, false);
			}
			((TextView) convertView.findViewById(android.R.id.text1)).setText(headers[column + 1]);
			return convertView;
		}

		private View getFirstBody(int row, int column, View convertView, ViewGroup parent) {
			if (convertView == null) {
				convertView = getActivity().getLayoutInflater().inflate(R.layout.item_table_first, parent, false);
			}
			convertView.setBackgroundResource(row % 2 == 0 ? R.drawable.bg_table_color1 : R.drawable.bg_table_color2);
			((TextView) convertView.findViewById(android.R.id.text1)).setText(getDevice(row).data[column + 1]);
			return convertView;
		}

		private View getBody(int row, int column, View convertView, ViewGroup parent) {
			if (convertView == null) {
				convertView = getActivity().getLayoutInflater().inflate(R.layout.item_table, parent, false);
			}
            /*if(row == 8){
                convertView.setBackgroundResource(R.color.row8);
            }*/else {
                convertView.setBackgroundResource(row % 2 == 0 ? R.drawable.bg_table_color1 : R.drawable.bg_table_color2);
            }
			((TextView) convertView.findViewById(android.R.id.text1)).setText(getDevice(row).data[column + 1]);
			return convertView;
		}

		private View getFamilyView(int row, int column, View convertView, ViewGroup parent) {
			if (convertView == null) {
				convertView = getActivity().getLayoutInflater().inflate(R.layout.item_table_family, parent, false);
			}
			final String string;
			if (column == -1) {
				string = getFamily(row).name;
			} else {
				string = "";
			}
			((TextView) convertView.findViewById(android.R.id.text1)).setText(string);
			return convertView;
		}


		public int getWidth(int column) {
			return Math.round(widths[column + 1] * density);
		}


		public int getHeight(int row) {
			final int height;
			if (row == -1) {
				height = 35;
			} else if (isFamily(row)) {
				height = 25;
			} else {
				height = 45;
			}
			return Math.round(height * density);
		}


		public int getItemViewType(int row, int column) {
			final int itemViewType;
			if (row == -1 && column == -1) {
				itemViewType = 0;
			} else if (row == -1) {
				itemViewType = 1;
			} else if (isFamily(row)) {
				itemViewType = 4;
			} else if (column == -1) {
				itemViewType = 2;
			} else {
				itemViewType = 3;
			}
			return itemViewType;
		}

		private boolean isFamily(int row) {
			int family = 0;
			while (row > 0) {
				row -= familys[family].size() + 1;
				family++;
			}
			return row == 0;
		}

		private NexusTypes getFamily(int row) {
			int family = 0;
			while (row >= 0) {
				row -= familys[family].size() + 1;
				family++;
			}
			return familys[family - 1];
		}

		private Nexus getDevice(int row) {
			int family = 0;
			while (row >= 0) {
				row -= familys[family].size() + 1;
				family++;
			}
			family--;
			return familys[family].get(row + familys[family].size());
		}


		public int getViewTypeCount() {
			return 5;
		}
	}
/*
    @Override
    public void onBackPressed() {
        super.onBackPressed();
        finish();
        Intent myintent = new Intent(FamilyTable.this,MainActivity.class);
        startActivity(myintent);

    }
    public boolean onOptionsItemSelected(MenuItem item){
        Intent myIntent = new Intent(getApplicationContext(), MainActivity.class);
        startActivityForResult(myIntent, 0);
        finish();
        return true;

    }*/
}
